@page "/"
@inject HttpClient Http
@inject IJSRuntime JsRuntime;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Linq;
@using System.Text.RegularExpressions;
@using BlazorInputFile;
@using System.Diagnostics;
@using System.IO;
@using System.Net.Http;
@using System.Text;

<!-- Sidebar toggle -->
<button type="button" id="sidebarCollapse" class="btn btn-info" @onclick="@toggle">
    <i class="fas fa-align-left"></i>
    <span>Toggle Sidebar</span>
</button>

  

<!-- Sidebar -->
<!-- <nav id="sidebar" class="active">
    <div id="dismiss">
        <button @onclick="@collapse" style="background-color:rgb(0,0,0,0);">
            <i class="fas fa-arrow-left"></i>
        </button>
    </div>
    <div class="sidebar-header">
        <h3>Linker Visualizer</h3>
    </div>

    <ul class="list-unstyled components">
        <li class="active">
            <a href="#homeSubmenu" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle">Line and Area</a>
            <ul class="collapse list-unstyled" id="homeSubmenu">
                @if (apps == null) {
                    <p><em>Loading...</em></p>
                } else {
                    @foreach (var app in apps)
                    {
                        <li><a @onclick="@( e => Graph(app) )">@app</a></li>
                    }
                }
            </ul>
        </li>
        <li>
            <a @onclick="@( e => explanationDisplay("sunburst") )">Sunburst</a>
        </li>
        
        <li>
            <a @onclick="@( e => explanationDisplay("tree") )" id="tree-btn">Treemap</a>
        </li>
        <li>
            <a @onclick="@( e => explanationDisplay("flower") )">Code flower</a>
        </li>
        <li>
            <a @onclick="clear">Clear graphs</a>
            </li>
    </ul>
</nav> -->

<!-- <div id="options" style="display:none;">
    <form>
        <p>
            <label>Only view methods greater than this size: </label>
            <input @bind="inputSize" id="size"/>
        </p>
        <p id="fields">
            <label>Merge overloaded methods</label>
            <input @bind="overload" id="overload" type="checkbox"/>
        </p>
        <button id="submit" type="button" class="btn btn-submit" @onclick="@( e => display(@displayType) )">display</button>
    </form>

    <InputFile id="inputfile" OnChange="HandleFileSelected" />
    @if(displayType == "sunburst") {
        <label>Change Linker input</label>
        <input @bind="sunburst_in" type="checkbox"/>
    }
    @if (file != null)
    {
        <p>Name: @file.Name</p>
        <p>Size in bytes: @file.Size</p>
        <p>Last modified date: @file.LastModified.ToShortDateString()</p>
        <p>Content type: @file.Type</p>
    }
</div> -->

<div id="chart">
            
    <div id="sunburst-container">
        <h2 class="chart-title" id="sunburst-title"></h2>
        <div class="description" id="sunburst-description"></div>
        <div id="sequence"></div>

        <div class="viz-container" id="sunburst-in">
            <div class="explanation" id="in-explanation" style="visibility: hidden;">
                    <span class="size" id="in-size"></span> =<br/>
                    <span class="percentage" id="in-percentage"></span><br/>
                    of overall size
                    @if (dataJson == null) {
                        <p><em>Loading...</em></p>
                    }
            </div>
        </div>
            
        <div class="viz-container" id="sunburst-out">
            <div class="explanation" id="explanation" style="visibility: hidden;">
                <span class="size" id="out-size"></span> =<br/>
                <span class="percentage" id="percentage"></span><br/>
                of overall size
            </div>
        </div>
    </div>
    <div id="treemap-container">
        <h2 class="chart-title" id="tree-title"></h2>
        <div class="description" id="tree-description"></div>
        <div class="viz-container" id="in-tree">
            <div class="menu"></div>
        </div>
        <div class="viz-container" id="out-tree"></div>
    </div>

    @if (apps != null) {
        <div id="line-container">
            <h2 class="chart-title" id="line-title">Line and Stacked Area graphs</h2>
            <li class="dropdown">
                <a class="dropdown-toggle btn" data-toggle="dropdown" href="#">Tests 
                 <span class="caret"></span></a>

                <ul class="dropdown-menu">
                    @if (apps == null) {
                        <p><em>Loading...</em></p>
                    } else {
                        @foreach (var app in apps)
                        {
                            <li><a class="dropdown-button" @onclick="@( e => Graph(app) )">@app</a></li>
                        }
                    }
                </ul>
            </li>
            <div class="line-viz" id="line"></div>
            <div class="line-viz" id="area"></div>
        </div>
    }
    
    
</div>



@code {  
    Dictionary<string, List<History.Info>> info;
    string[] apps;
    FormatData data;
    FormatData in_data;
    FormatData temp_data;
    string sunburst_str;
    string sunburst_in_str;
    string dataJson;
    string dataJson_in;
    private int inputSize { get; set; }
    private bool overload { get; set; }
    private bool sunburst_in { get; set; }
    private int currentSize;
    private bool currentOverload;
    string displayType;
    IFileListEntry file;

    async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        string json_str = await ReadFile();
        var json_file = (List<FormatData>)JsonConvert.DeserializeObject(json_str, typeof(List<FormatData>));
        if (json_file != null) {
            if (sunburst_in) {
                in_data.children = json_file;
            } else {    
                data.children = json_file;
            }
            await display(displayType, true);
        }
    }   

    async Task<string> ReadFile() {
        using (var reader = new System.IO.StreamReader(file.Data)) {
            var result = await reader.ReadToEndAsync();
            return result;
        }
    }

    private async Task Graph(string app) {
        
        List<Dictionary<string, object>> data = new List<Dictionary<string, object>>();
    
        List<History.Info> infoPizza = info[app];
        foreach (var item in infoPizza) {
            data.Add(item.Library);
        }
        var json = JsonConvert.SerializeObject(data);
        await JsRuntime.InvokeAsync<string>("graph", json);
        //await JsRuntime.InvokeAsync<string>("areaGraph", json);
    }

    private async Task clear() {
        await JsRuntime.InvokeAsync<string>("clear");
    }

    private async Task toggle() {
        await JsRuntime.InvokeAsync<string>("toggle");
    }

    private async Task collapse() {
        await JsRuntime.InvokeAsync<string>("collapse");
    }

    private async void sunburst() {
        await JsRuntime.InvokeAsync<string>("sunburst");   
    }

    private async void slope() {
        await JsRuntime.InvokeAsync<string>("slope");
    }

    private async Task getData(string path, string state="in") {
        StringBuilder json_str = new StringBuilder();
        var watch = Stopwatch.StartNew();
        using(HttpResponseMessage response = await Http.GetAsync(path, HttpCompletionOption.ResponseHeadersRead))
        using (Stream streamToReadFrom = await response.Content.ReadAsStreamAsync()) 
        using (BufferedStream bs = new BufferedStream(streamToReadFrom)){
            using (var reader = new StreamReader(bs)) {
                
                string s;
                while ((s = reader.ReadLine()) != null) {
                    json_str.Append(s);
                }
                
            }
        }
        var json_data = (List<FormatData>)JsonConvert.DeserializeObject(json_str.ToString(), typeof(List<FormatData>));
        if (state == "in") {
            in_data = new FormatData {name="All (in)", children=json_data};
        } else {
            data = new FormatData {name="All (out)", children=json_data}; 
        }
        watch.Stop();
        Console.WriteLine("get data " + state + " " + watch.ElapsedMilliseconds);
    }

    private string getClassName(string className) {
        int index = Regex.Match(className, @"\p{Lu}").Index;
        className = className.Substring(index, className.Length-index);
        className = className.Replace(",", "");
        return className;
    }

    private string getMethodName(string name) {
        char[] separator = {'('};
        name = name.Split(separator)[0];
        return name;
    }

    private void formatData(FormatData data, int size, bool overload, string state) {
        temp_data = new FormatData {name=data.name, 
                                            size=data.size, 
                                            children=new List<FormatData>()};
        StringBuilder csv_str = new StringBuilder();
        foreach(var item in data.children) {
            string as_name = item.name;
            FormatData as_data = new FormatData{name=as_name, size=0};
            if (item.children != null) {
                foreach(var cl in item.children) {    
                    cl.name = getClassName(cl.name);
                    string class_name = cl.name;
                    FormatData class_data = new FormatData{name=class_name, children=null};            
                    if (cl.children != null && cl.size > 0) {
                        var children = cl.children;
                        if (overload) {
                            children = children.Select((d, i) => 
                                            new FormatData{name=getMethodName(d.name), size=d.size}).ToList();
                            children = children.GroupBy(d => d.name)
                                            .Select((d, i) => new FormatData
                                            {
                                                name=d.Key,
                                                size=d.Sum(da => da.size)
                                            }).ToList();
                        }
                        var child_2 = children.Where(d => d.size > size).ToList();
                        children = child_2;
                        class_data.children = child_2;
                        string begin = "All" + " (" + state+ ")" + "-" + as_name + "-" + class_name + "-";
                        children.ForEach(d => {
                            string name = d.name.Replace(",", "");
                            csv_str.Append(begin + name + "," + d.size + "\n");
                        });
                    }
                        
                    if (class_data.children != null && 
                        class_data.children.Count() > 0) {
                        if (as_data.children == null) {
                            as_data.children = new List<FormatData>();
                        }
                        as_data.children.Add(class_data); 
                    }
                    
                }
            }
            temp_data.children.Add(as_data);
        }
        
        if (state == "out") {
            sunburst_str = csv_str.ToString();
            dataJson = JsonConvert.SerializeObject(temp_data);
        } else if (state == "in") {
            dataJson_in = JsonConvert.SerializeObject(temp_data);
            sunburst_in_str = csv_str.ToString();
        }
        temp_data = null;
    }

    private async Task explanationDisplay(string type) {
        displayType = type;
        await JsRuntime.InvokeAsync<string>("display", type);
    }

    private async Task display(string type, bool new_file=false) {
        displayType = type;
        if (inputSize != currentSize || overload != currentOverload || new_file) {
            formatData(data, inputSize, overload, "out");
            if (displayType == "sunburst") {
                formatData(in_data, inputSize, overload, "in");
            }
            currentSize = inputSize;
            currentOverload = overload;
        }
        
        if (type == "tree") {
            var js = dataJson.Replace("size", "value");
            await JsRuntime.InvokeAsync<string>("tree", js);
        } else if (type == "sunburst") {
            await JsRuntime.InvokeAsync<string>("sunburst", sunburst_str, sunburst_in_str);
        } 
        else {
            await JsRuntime.InvokeAsync<string>(type, dataJson);
        }
    }

    private async Task LoadHistory() {
        Console.WriteLine("load history start");
        Task<Dictionary<string, List<History.Info>>> history = History.LibraryTable.LoadHistory();
        info = await history;
    }

    protected override async Task OnInitializedAsync() {
        displayType = "";
        sunburst_str = "";
        sunburst_in_str = "";
        inputSize = 300;
        overload = false;

        var watch = Stopwatch.StartNew();
        List<Task> tasks = new List<Task>();
        tasks.Add(LoadHistory());
        tasks.Add(getData("json/mscorlib-in.json", "in"));
        tasks.Add(getData("json/mscorlib.json", "out"));
        tasks.Add(clear());
        await Task.WhenAll(tasks);
        apps = info.Keys.ToArray();  
        watch.Stop();
        Console.WriteLine("get data " + watch.ElapsedMilliseconds);
        formatData(data, inputSize, overload, "out");
        formatData(in_data, inputSize, overload, "in");
        var tree = dataJson.Replace("size", "value");
        var tree_in = dataJson_in.Replace("size", "value");
        await JsRuntime.InvokeAsync<string>("displayAll", sunburst_str, sunburst_in_str, dataJson,
                                            dataJson_in, tree, tree_in);
    }
    
    public class FormatData{
        public string name { get; set; }
        public int size { get; set; }
        public List<FormatData> children { get; set; }

        public FormatData Copy() {
            FormatData other = (FormatData) this.MemberwiseClone();
            other.name = String.Copy(name);
            other.size = size;
            other.children = new List<FormatData>(children);
            return other;
        }
    }
    

}

