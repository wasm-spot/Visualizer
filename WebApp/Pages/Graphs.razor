@page "/"
@inject HttpClient Http
@inject IJSRuntime JsRuntime;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Linq;
@using System.Text.RegularExpressions;
@using BlazorInputFile;
@using System.Diagnostics;
@using System.IO;
@using System.Net.Http;
@using System.Text;


@* <div id="landing" class="animated fadeInUp">
    <h1 class="landing-title">Linker Visualizer</h1>
    <div id="options">
        <form>
            <p id="fields">
                <input @bind="overload" id="overload" type="checkbox"/>
                <label>Merge overloaded methods</label>

                <input @bind="compare" id="compare" type="checkbox"/>
                <label>Compare two data sources</label>
            </p>

            
            <label>Upload input data files</label>
            <InputFile id="inputfile" OnChange="HandleInFileSelected" />
            @if (file != null)
            {
                <p>Name: @inFileName</p>
            }
            
            

            @if(compare) {
                <label>Upload output data file</label>
                <InputFile id="inputfile" OnChange="HandleOutFileSelected" />
                @if (file != null)
                {
                    <p>Name: @fileName</p>
                }
            } 
            <br/>
        </form>
    </div>
</div>

<div id="chart" class="animated fadeInUp">
            
    <div id="container">
        <h2 class="chart-title" id="sunburst-title"></h2>
        <div class="description" id="sunburst-description"></div>
        <div id="sequence"></div>
        <div class="row">
            <div class="viz-container" id="sunburst-in">
                <div class="slidecontainer" style="display:none">
                    Only view methods greater than this size:
                    <br />
                    <input type="range" min="100" max="2000" value="250" id="sunburstInSizeRange"> <div class="value" id="sunburstInSizeValue"></div>
                </div>

                <div class="explanation" id="in-explanation" style="visibility: hidden;">
                        <span class="size" id="in-size"></span> =<br/>
                        <span class="percentage" id="in-percentage"></span><br/>
                        of overall size
           
                </div>
            </div>
            
            @if(compare) {
                <div class="viz-container" id="sunburst-out">
                    <div class="explanation" id="explanation" style="visibility: hidden;">
                        <span class="size" id="out-size"></span> =<br/>
                        <span class="percentage" id="percentage"></span><br/>
                        of overall size
                    </div>
                </div>
            }
                
        </div>
        
        
    </div>
    <div id="container">
        <h2 class="chart-title" id="tree-title"></h2>
        <div class="description" id="tree-description"></div>

        <div class="row">
            <div class="viz-container" id="in-tree">
                <div class="menu">
                    @if (!zoomed && compare) {
                        <button class="btn btn-secondary" @onclick="expandTree">zoom</button>
                    } else {
                        <button class="btn btn-secondary" @onclick="shrinkTree">un-zoom</button>
                    }

                    <div class="slidecontainer">
                        Only view methods greater than this size:
                        <br />
                        <input type="range" min="100" max="2000" value="250" id="treeInSizeRange"> <div class="value" id="treeInSizeValue"></div>
                    </div>
                    
                </div>
            </div>
            @if(compare) {
                <div class="viz-container" id="out-tree">
                    <div class="menu">
                        @if (!zoomed) {
                            <button class="btn btn-secondary" @onclick="expandTree">zoom</button>
                        }
                    </div>
                </div>
            }
            
        </div>
        
        
    </div>

    <div id="container">
        <div class="row">
            <div class="viz-container" id="wheel">
                <div class="slidecontainer" style="display:none">
                    <div>
                        Only view dependencies greater than this size:
                        <br/>
                        <input type="range" min="100" max="600" value="250" id="sizeRange"> <div class="value" id="sizeValue"></div>
                    </div>

                    <div>
                        Minimum number of dependencies:
                        <br/>
                        <input type="range" min="0" max="50" value="5" id="depRange"> <div class="value" id="depValue"></div>
                    </div>
                </div>
            </div>
            <div class="viz-container" id="dep-tree"></div>
        </div>
    </div>

    @if (apps != null) {
        <div id="line-container">
            <h2 class="chart-title" id="line-title">Line and Stacked Area graphs</h2>
            <li class="dropdown">
                <a class="dropdown-toggle btn option-button" data-toggle="dropdown" href="#">Tests 
                 <span class="caret"></span></a>

                <ul class="dropdown-menu">
                    @if (apps == null) {
                        <p><em>Loading...</em></p>
                    } else {
                        @foreach (var app in apps)
                        {
                            <li><a class="dropdown-button" @onclick="@( e => Graph(app) )">@app</a></li>
                        }
                    }
                </ul>
            </li>
            <div class="line-viz" id="line"></div>
            <div class="line-viz" id="area"></div>
        </div>
    } 
    
    
</div>
*@


@code {  
    Dictionary<string, List<History.Info>> info;
    string[] apps;
    FormatData tempData;
    string sunburstStr;
    string sunburstInStr;
    string dataJson;
    string dataJsonIn;
    string tree;
    string treeIn;
    private int inputSize { get; set; }
    private bool overload { get; set; }
    private bool compare { get; set; }
    string displayType;
    string inFileName;
    string fileName;
    string dataPath;
    FormatData data;
    FormatData inData;
    IFileListEntry file;
    private bool zoomed;

    async Task HandleInFileSelected(IFileListEntry[] files) {
        file = files.FirstOrDefault();
        inFileName = file.Name;
        await LoadFile(file, "in");
    }

    async Task HandleOutFileSelected(IFileListEntry[] files) {
        file = files.FirstOrDefault();
        fileName = file.Name;
        await LoadFile(file, "in");
    }

    async Task LoadFile(IFileListEntry file, string state) {
        string jsonStr = await ReadFile(file); 
        var jsonFile = (List<FormatData>)JsonConvert.DeserializeObject(jsonStr, typeof(List<FormatData>));
        if (jsonFile != null) {
            if (state == "in") {
                inData.name = "All(" + inFileName + ")";
                inData.children = jsonFile;
            } else {
                data.name = "All(" + fileName + ")";
                data.children = jsonFile;
            }
        }
    }

    async Task<string> ReadFile(IFileListEntry file) {
        using (var reader = new System.IO.StreamReader(file.Data)) {
            var result = await reader.ReadToEndAsync();
            return result;
        }
    }

    private string getFileName(string path) {
        string[] tempPath = path.Split('/');
        return tempPath[tempPath.Length - 1];
    }

    private async Task Graph(string app) {
        
        List<Dictionary<string, object>> data = new List<Dictionary<string, object>>();
    
        List<History.Info> infoPizza = info[app];
        foreach (var item in infoPizza) {
            data.Add(item.Library);
        }
        var json = JsonConvert.SerializeObject(data);
        await JsRuntime.InvokeAsync<string>("graph", json);
    }

    private async Task clear() {
        await JsRuntime.InvokeAsync<string>("clear");
    }

    private async Task reset() {
        await JsRuntime.InvokeAsync<string>("reset");
    }

    private async Task toggle() {
        await JsRuntime.InvokeAsync<string>("display");
    }

    private async Task collapse() {
        await JsRuntime.InvokeAsync<string>("collapse");
    }

    private async void sunburst() {
        await JsRuntime.InvokeAsync<string>("sunburst");   
    }

    private async void expandTree() {
        zoomed = true;
        await JsRuntime.InvokeAsync<string>("expandTree", treeIn, tree);
    }

    private async void shrinkTree() {
        zoomed = false;
        await JsRuntime.InvokeAsync<string>("shrinkTree", treeIn, tree);
    }

    private string getClassName(string className) {
        int index = Regex.Match(className, @"\p{Lu}").Index;
        className = className.Substring(index, className.Length-index);
        className = className.Replace(",", "").Replace("/", " / ");
        return className;
    }

    private string getMethodName(string name) {
        char[] separator = {'('};
        name = name.Split(separator)[0];
        return name;
    }

    private string formatMethodName(string name) {
        return "(Method " + name.Replace(",", " ").Replace("::", " :: ")
                .Replace("/", " / ");
    }

    private void formatData(FormatData data, int size, bool overload, string state, 
                            string fileName) {
        tempData = new FormatData {name=data.name, 
                                            size=data.size, 
                                            children=new List<FormatData>()};
        StringBuilder csvStr = new StringBuilder();
        foreach(var item in data.children) {
            string asName = "(Assembly) " + item.name;
            FormatData asData = new FormatData{name=asName, size=0};
            if (item.children != null) {
                foreach(var cl in item.children) {    
                    cl.name = getClassName(cl.name);
                    string className = "(Class) " + cl.name;
                    FormatData classData = new FormatData{name=className, children=null};            
                    if (cl.children != null && cl.size > 0) {
                        var children = cl.children;
                        if (overload) {
                            children = children.Select((d, i) => 
                                            new FormatData{name=getMethodName(d.name), size=d.size}).ToList();
                            children = children.GroupBy(d => d.name)
                                            .Select((d, i) => new FormatData
                                            {
                                                name=d.Key,
                                                size=d.Sum(da => da.size)
                                            }).ToList();
                        }
                        var child2 = children.Where(d => d.size > size).ToList();
                        children = child2;
                        classData.children = child2;
                        string begin = "All" + " (" + fileName+ ")" + "-" + asName + "-" + className + "-";
                        children.ForEach(d => {
                            string name = formatMethodName(d.name);
                            csvStr.Append(begin + name + "," + d.size + "\n");
                        });
                    }
                        
                    if (classData.children != null && 
                        classData.children.Count() > 0) {
                        if (asData.children == null) {
                            asData.children = new List<FormatData>();
                        }
                        asData.children.Add(classData); 
                    }
                    
                }
            }
            tempData.children.Add(asData);
        }
        
        if (state == "out") {
            sunburstStr = csvStr.ToString();
            dataJson = JsonConvert.SerializeObject(tempData);
            tree = dataJson.Replace("size", "value");
        } else if (state == "in") {
            dataJsonIn = JsonConvert.SerializeObject(tempData);
            sunburstInStr = csvStr.ToString();
            treeIn = dataJsonIn.Replace("size", "value");
        }
        tempData = null;
    }

    private async Task explanationDisplay(string type) {
        displayType = type;
        await JsRuntime.InvokeAsync<string>("display", type);
    }

    private async Task display() {
        if (inFileName == "") inFileName = dataPath;
        if (fileName == "") fileName = "mscorlib.json";

        await JsRuntime.InvokeAsync<string>("displayAll", inputSize, overload, compare);
    }

    private async Task LoadHistory() {
        Console.WriteLine("load history start");
        info = await History.LibraryTable.LoadHistory();
        apps = info.Keys.ToArray();  
    }

    protected override async Task OnInitializedAsync() {
        displayType = "";
        sunburstStr = "";
        sunburstInStr = "";
        fileName = "";
        inFileName = "";
        inputSize = 300;
        overload = false;
        zoomed = false;

        var watch = Stopwatch.StartNew();      
    }
    
    public class FormatData{
        public string name { get; set; }
        public int size { get; set; }
        public List<FormatData> children { get; set; }

        public FormatData Copy() {
            FormatData other = (FormatData) this.MemberwiseClone();
            other.name = String.Copy(name);
            other.size = size;
            other.children = new List<FormatData>(children);
            return other;
        }
    }
    

}

